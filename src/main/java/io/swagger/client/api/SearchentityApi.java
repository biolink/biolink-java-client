/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.Association;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchentityApi {
    private ApiClient apiClient;

    public SearchentityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchentityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getAuthocomplete */
    private com.squareup.okhttp.Call getAuthocompleteCall(String term, List<String> weightedAttribute, List<String> attribute, Boolean noise, String subjectTaxon, List<String> negativeAttribute, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling getAuthocomplete(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/search/entity/autocomplete/{term}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "term" + "\\}", apiClient.escapeString(term.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (weightedAttribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "weighted_attribute", weightedAttribute));
        if (attribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "attribute", attribute));
        if (noise != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "noise", noise));
        if (subjectTaxon != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "subject_taxon", subjectTaxon));
        if (negativeAttribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "negative_attribute", negativeAttribute));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns list of matches
     * 
     * @param term  (required)
     * @param weightedAttribute weighted attributes, specified as a range from 0 to 1 plus an ontology term, e.g. 0.3*HP:0000001 (optional)
     * @param attribute positive attributes, e.g. ontology terms, to include in query (optional)
     * @param noise If set, uses noise-tolerant querying, e.g owlsim, boqa (optional)
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param negativeAttribute negative attributes, e.g. ontology terms, to exclude in query (optional)
     * @return List&lt;Association&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Association> getAuthocomplete(String term, List<String> weightedAttribute, List<String> attribute, Boolean noise, String subjectTaxon, List<String> negativeAttribute) throws ApiException {
        ApiResponse<List<Association>> resp = getAuthocompleteWithHttpInfo(term, weightedAttribute, attribute, noise, subjectTaxon, negativeAttribute);
        return resp.getData();
    }

    /**
     * Returns list of matches
     * 
     * @param term  (required)
     * @param weightedAttribute weighted attributes, specified as a range from 0 to 1 plus an ontology term, e.g. 0.3*HP:0000001 (optional)
     * @param attribute positive attributes, e.g. ontology terms, to include in query (optional)
     * @param noise If set, uses noise-tolerant querying, e.g owlsim, boqa (optional)
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param negativeAttribute negative attributes, e.g. ontology terms, to exclude in query (optional)
     * @return ApiResponse&lt;List&lt;Association&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Association>> getAuthocompleteWithHttpInfo(String term, List<String> weightedAttribute, List<String> attribute, Boolean noise, String subjectTaxon, List<String> negativeAttribute) throws ApiException {
        com.squareup.okhttp.Call call = getAuthocompleteCall(term, weightedAttribute, attribute, noise, subjectTaxon, negativeAttribute, null, null);
        Type localVarReturnType = new TypeToken<List<Association>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns list of matches (asynchronously)
     * 
     * @param term  (required)
     * @param weightedAttribute weighted attributes, specified as a range from 0 to 1 plus an ontology term, e.g. 0.3*HP:0000001 (optional)
     * @param attribute positive attributes, e.g. ontology terms, to include in query (optional)
     * @param noise If set, uses noise-tolerant querying, e.g owlsim, boqa (optional)
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param negativeAttribute negative attributes, e.g. ontology terms, to exclude in query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthocompleteAsync(String term, List<String> weightedAttribute, List<String> attribute, Boolean noise, String subjectTaxon, List<String> negativeAttribute, final ApiCallback<List<Association>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthocompleteCall(term, weightedAttribute, attribute, noise, subjectTaxon, negativeAttribute, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Association>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAuthocomplete_0 */
    private com.squareup.okhttp.Call getAuthocomplete_0Call(List<String> weightedAttribute, List<String> attribute, Boolean noise, String subjectTaxon, List<String> negativeAttribute, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/search/entity/query/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (weightedAttribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "weighted_attribute", weightedAttribute));
        if (attribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "attribute", attribute));
        if (noise != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "noise", noise));
        if (subjectTaxon != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "subject_taxon", subjectTaxon));
        if (negativeAttribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "negative_attribute", negativeAttribute));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns list of matches
     * 
     * @param weightedAttribute weighted attributes, specified as a range from 0 to 1 plus an ontology term, e.g. 0.3*HP:0000001 (optional)
     * @param attribute positive attributes, e.g. ontology terms, to include in query (optional)
     * @param noise If set, uses noise-tolerant querying, e.g owlsim, boqa (optional)
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param negativeAttribute negative attributes, e.g. ontology terms, to exclude in query (optional)
     * @return List&lt;Association&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Association> getAuthocomplete_0(List<String> weightedAttribute, List<String> attribute, Boolean noise, String subjectTaxon, List<String> negativeAttribute) throws ApiException {
        ApiResponse<List<Association>> resp = getAuthocomplete_0WithHttpInfo(weightedAttribute, attribute, noise, subjectTaxon, negativeAttribute);
        return resp.getData();
    }

    /**
     * Returns list of matches
     * 
     * @param weightedAttribute weighted attributes, specified as a range from 0 to 1 plus an ontology term, e.g. 0.3*HP:0000001 (optional)
     * @param attribute positive attributes, e.g. ontology terms, to include in query (optional)
     * @param noise If set, uses noise-tolerant querying, e.g owlsim, boqa (optional)
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param negativeAttribute negative attributes, e.g. ontology terms, to exclude in query (optional)
     * @return ApiResponse&lt;List&lt;Association&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Association>> getAuthocomplete_0WithHttpInfo(List<String> weightedAttribute, List<String> attribute, Boolean noise, String subjectTaxon, List<String> negativeAttribute) throws ApiException {
        com.squareup.okhttp.Call call = getAuthocomplete_0Call(weightedAttribute, attribute, noise, subjectTaxon, negativeAttribute, null, null);
        Type localVarReturnType = new TypeToken<List<Association>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns list of matches (asynchronously)
     * 
     * @param weightedAttribute weighted attributes, specified as a range from 0 to 1 plus an ontology term, e.g. 0.3*HP:0000001 (optional)
     * @param attribute positive attributes, e.g. ontology terms, to include in query (optional)
     * @param noise If set, uses noise-tolerant querying, e.g owlsim, boqa (optional)
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param negativeAttribute negative attributes, e.g. ontology terms, to exclude in query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthocomplete_0Async(List<String> weightedAttribute, List<String> attribute, Boolean noise, String subjectTaxon, List<String> negativeAttribute, final ApiCallback<List<Association>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthocomplete_0Call(weightedAttribute, attribute, noise, subjectTaxon, negativeAttribute, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Association>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSearchEntities */
    private com.squareup.okhttp.Call getSearchEntitiesCall(String term, List<String> weightedAttribute, List<String> attribute, Boolean noise, String subjectTaxon, List<String> negativeAttribute, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling getSearchEntities(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/search/entity/{term}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "term" + "\\}", apiClient.escapeString(term.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (weightedAttribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "weighted_attribute", weightedAttribute));
        if (attribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "attribute", attribute));
        if (noise != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "noise", noise));
        if (subjectTaxon != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "subject_taxon", subjectTaxon));
        if (negativeAttribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "negative_attribute", negativeAttribute));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns list of matches
     * 
     * @param term  (required)
     * @param weightedAttribute weighted attributes, specified as a range from 0 to 1 plus an ontology term, e.g. 0.3*HP:0000001 (optional)
     * @param attribute positive attributes, e.g. ontology terms, to include in query (optional)
     * @param noise If set, uses noise-tolerant querying, e.g owlsim, boqa (optional)
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param negativeAttribute negative attributes, e.g. ontology terms, to exclude in query (optional)
     * @return List&lt;Association&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Association> getSearchEntities(String term, List<String> weightedAttribute, List<String> attribute, Boolean noise, String subjectTaxon, List<String> negativeAttribute) throws ApiException {
        ApiResponse<List<Association>> resp = getSearchEntitiesWithHttpInfo(term, weightedAttribute, attribute, noise, subjectTaxon, negativeAttribute);
        return resp.getData();
    }

    /**
     * Returns list of matches
     * 
     * @param term  (required)
     * @param weightedAttribute weighted attributes, specified as a range from 0 to 1 plus an ontology term, e.g. 0.3*HP:0000001 (optional)
     * @param attribute positive attributes, e.g. ontology terms, to include in query (optional)
     * @param noise If set, uses noise-tolerant querying, e.g owlsim, boqa (optional)
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param negativeAttribute negative attributes, e.g. ontology terms, to exclude in query (optional)
     * @return ApiResponse&lt;List&lt;Association&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Association>> getSearchEntitiesWithHttpInfo(String term, List<String> weightedAttribute, List<String> attribute, Boolean noise, String subjectTaxon, List<String> negativeAttribute) throws ApiException {
        com.squareup.okhttp.Call call = getSearchEntitiesCall(term, weightedAttribute, attribute, noise, subjectTaxon, negativeAttribute, null, null);
        Type localVarReturnType = new TypeToken<List<Association>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns list of matches (asynchronously)
     * 
     * @param term  (required)
     * @param weightedAttribute weighted attributes, specified as a range from 0 to 1 plus an ontology term, e.g. 0.3*HP:0000001 (optional)
     * @param attribute positive attributes, e.g. ontology terms, to include in query (optional)
     * @param noise If set, uses noise-tolerant querying, e.g owlsim, boqa (optional)
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param negativeAttribute negative attributes, e.g. ontology terms, to exclude in query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSearchEntitiesAsync(String term, List<String> weightedAttribute, List<String> attribute, Boolean noise, String subjectTaxon, List<String> negativeAttribute, final ApiCallback<List<Association>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSearchEntitiesCall(term, weightedAttribute, attribute, noise, subjectTaxon, negativeAttribute, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Association>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
