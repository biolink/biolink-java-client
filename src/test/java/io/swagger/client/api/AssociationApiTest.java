/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Association;
import io.swagger.client.model.AssociationResults;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AssociationApi
 */
public class AssociationApiTest {

    private final AssociationApi api = new AssociationApi();

    
    /**
     * Returns the association with a given identifier
     *
     * An association connects, at a minimum, two things, designated subject and object, via some relationship. Associations also include evidence, provenance etc.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAssociationObjectTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Boolean flExcludesEvidence = null;
        String evidence = null;
        Integer page = null;
        String object = null;
        String subject = null;
        String subjectTaxon = null;
        Boolean graphize = null;
        String mapIdentifiers = null;
        // List<Association> response = api.getAssociationObject(id, rows, flExcludesEvidence, evidence, page, object, subject, subjectTaxon, graphize, mapIdentifiers);

        // TODO: test validations
    }
    
    /**
     * Returns list of matching associations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAssociationSearchTest() throws ApiException {
        Integer rows = null;
        Boolean flExcludesEvidence = null;
        String evidence = null;
        Integer page = null;
        String object = null;
        String subject = null;
        String subjectTaxon = null;
        Boolean graphize = null;
        String mapIdentifiers = null;
        // List<AssociationResults> response = api.getAssociationSearch(rows, flExcludesEvidence, evidence, page, object, subject, subjectTaxon, graphize, mapIdentifiers);

        // TODO: test validations
    }
    
    /**
     * Returns list of matching associations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAssociationSearch_0Test() throws ApiException {
        String objectCategory = null;
        String subjectCategory = null;
        Integer rows = null;
        Boolean flExcludesEvidence = null;
        String evidence = null;
        Integer page = null;
        String object = null;
        String subject = null;
        String subjectTaxon = null;
        Boolean graphize = null;
        String mapIdentifiers = null;
        // List<AssociationResults> response = api.getAssociationSearch_0(objectCategory, subjectCategory, rows, flExcludesEvidence, evidence, page, object, subject, subjectTaxon, graphize, mapIdentifiers);

        // TODO: test validations
    }
    
    /**
     * Returns list of matching associations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAssociationSearch_1Test() throws ApiException {
        String objectCategory = null;
        String subjectCategory = null;
        Integer rows = null;
        Boolean flExcludesEvidence = null;
        String evidence = null;
        Integer page = null;
        String object = null;
        String subject = null;
        String subjectTaxon = null;
        Boolean graphize = null;
        String mapIdentifiers = null;
        // List<AssociationResults> response = api.getAssociationSearch_1(objectCategory, subjectCategory, rows, flExcludesEvidence, evidence, page, object, subject, subjectTaxon, graphize, mapIdentifiers);

        // TODO: test validations
    }
    
    /**
     * Returns associations connecting two entities
     *
     * Given two entities (e.g. a particular gene and a particular disease), if these two entities are connected (directly or indirectly), then return the association objects describing the connection.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAssociationsFromTest() throws ApiException {
        String object = null;
        String subject = null;
        String objectCategory = null;
        String mapIdentifiers = null;
        String evidence = null;
        String subjectCategory = null;
        Integer page = null;
        Boolean flExcludesEvidence = null;
        String subjectTaxon = null;
        Boolean graphize = null;
        Integer rows = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getAssociationsFrom(object, subject, objectCategory, mapIdentifiers, evidence, subjectCategory, page, flExcludesEvidence, subjectTaxon, graphize, rows, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns list of matching associations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAssociationsFrom_0Test() throws ApiException {
        String subject = null;
        String objectCategory = null;
        String mapIdentifiers = null;
        String evidence = null;
        String subjectCategory = null;
        Integer page = null;
        Boolean flExcludesEvidence = null;
        String subjectTaxon = null;
        Boolean graphize = null;
        Integer rows = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getAssociationsFrom_0(subject, objectCategory, mapIdentifiers, evidence, subjectCategory, page, flExcludesEvidence, subjectTaxon, graphize, rows, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns list of matching associations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAssociationsToTest() throws ApiException {
        String object = null;
        String objectCategory = null;
        String mapIdentifiers = null;
        String evidence = null;
        String subjectCategory = null;
        Integer page = null;
        Boolean flExcludesEvidence = null;
        String subjectTaxon = null;
        Boolean graphize = null;
        Integer rows = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getAssociationsTo(object, objectCategory, mapIdentifiers, evidence, subjectCategory, page, flExcludesEvidence, subjectTaxon, graphize, rows, useCompactAssociations);

        // TODO: test validations
    }
    
}
