/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Allele;
import io.swagger.client.model.Association;
import io.swagger.client.model.AssociationResults;
import io.swagger.client.model.Gene;
import io.swagger.client.model.BioObject;
import io.swagger.client.model.Genotype;
import io.swagger.client.model.NamedObject;
import io.swagger.client.model.Substance;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BioentityApi
 */
public class BioentityApiTest {

    private final BioentityApi api = new BioentityApi();

    
    /**
     * TODO Returns allele object
     *
     * This is a composition of multiple smaller operations, including fetching allele metadata, plus allele associations  TODO - should allele be subsumed into variant?
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAlleleObjectTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Allele> response = api.getAlleleObject(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns associations between anatomical entity and genes
     *
     * Typically encompasses genes expressed in a particular location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnatomyGeneAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getAnatomyGeneAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns anatomical entity
     *
     * Anatomical entities span ranges from the subcellular (e.g. nucleus) through cells to tissues, organs and organ systems.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnatomyObjectTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // api.getAnatomyObject(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns associations between anatomical entity and phenotypes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnatomyPhenotypeAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getAnatomyPhenotypeAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns anatomical locations associated with a disease
     *
     * For example, neurodegeneratibe disease located in nervous system. For cancer, this may include both site of original and end location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiseaseAnatomyAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getDiseaseAnatomyAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns biological functions associated with a disease
     *
     * This may come from a combination of asserted knowledge (e.g. Fanconi Anemia affects DNA repair) or from data-driven approach (cf Translator)  Results are typically represented as GO classes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiseaseFunctionAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getDiseaseFunctionAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns genes associated with a disease
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiseaseGeneAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getDiseaseGeneAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns associations to models of the disease
     *
     * In the association object returned, the subject will be the disease, and the object will be the model. The model may be a gene or genetic element.  If the query disease is a general class, the association subject may be to a specific disease.  In some cases the association will be *direct*, for example if a paper asserts a genotype is a model of a disease.  In other cases, the association will be *indirect*, for example, chaining over orthology. In these cases the chain will be reflected in the *evidence graph*  * TODO: provide hook into owlsim for dynamic computation of models by similarity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiseaseModelAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getDiseaseModelAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Same as &#x60;/disease/&lt;id&gt;/models&#x60; but constrain models by taxon
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiseaseModelTaxonAssociationsTest() throws ApiException {
        String taxon = null;
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getDiseaseModelTaxonAssociations(taxon, id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns disease object
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiseaseObjectTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // api.getDiseaseObject(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns phenotypes associated with disease
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiseasePhenotypeAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getDiseasePhenotypeAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns substances associated with a disease
     *
     * e.g. drugs or small molecules used to treat
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiseaseSubstanceAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // api.getDiseaseSubstanceAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns substances associated with a disease
     *
     * e.g. drugs or small molecules used to treat
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiseaseSubstanceAssociations_0Test() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // api.getDiseaseSubstanceAssociations_0(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns environment entity
     *
     * TODO consider renaming exposure
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEnvironmentObjectTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // api.getEnvironmentObject(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns list of associations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEnvironmentPhenotypeAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getEnvironmentPhenotypeAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns expression events for a gene
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGeneExpressionAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getGeneExpressionAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns function associations for a gene
     *
     * Note: currently this is implemented as a query to the GO solr instance. A smaller set of identifiers may be supported:   - ZFIN e.g. ZFIN:ZDB-GENE-050417-357  - MGI e.g. MGI:1342287  - Use UniProt for human (TODO: map this)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGeneFunctionAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        String type = null;
        String homologTaxon = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getGeneFunctionAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, type, homologTaxon, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns homologs for a gene
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGeneHomologAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        String type = null;
        String homologTaxon = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getGeneHomologAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, type, homologTaxon, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns interactions for a gene
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGeneInteractionsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getGeneInteractions(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns gene object
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGeneObjectTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Gene> response = api.getGeneObject(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns phenotypes associated with gene
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGenePhenotypeAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // api.getGenePhenotypeAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns expression events for a gene
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGenePublicationListTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getGenePublicationList(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns gene product object
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGeneproductObjectTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // api.getGeneproductObject(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns associations for an entity regardless of the type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGenericAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getGenericAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns object of any type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGenericObjectTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<BioObject> response = api.getGenericObject(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns diseases associated with a genotype
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGenotypeDiseaseAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getGenotypeDiseaseAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns genes associated with a genotype
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGenotypeGeneAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getGenotypeGeneAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns genotypes-genotype associations
     *
     * Genotypes may be related to one another according to the GENO model
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGenotypeGenotypeAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getGenotypeGenotypeAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns genotype object
     *
     * The genotype object will have the following association sets populated:   * gene  * phenotype  * disease
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGenotypeObjectTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Genotype> response = api.getGenotypeObject(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns phenotypes associated with a genotype
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGenotypePhenotypeAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getGenotypePhenotypeAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns associated phenotypes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGotermGeneAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getGotermGeneAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns GO class object
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGotermObjectTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // api.getGotermObject(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns associated phenotypes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGotermPhenotypeAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getGotermPhenotypeAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns associations between a lit entity and a disease
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLiteratureDiseaseAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getLiteratureDiseaseAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns associations between a lit entity and a gene
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLiteratureGeneAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getLiteratureGeneAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns associations between a lit entity and a genotype
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLiteratureGenotypeAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getLiteratureGenotypeAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns individual
     *
     * Individuals may typically encompass patients, but can be individuals of any species
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParentObjectTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // api.getParentObject(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns investigation object
     *
     * Investigations encompass clinical trials, molecular biology experiments or any kind of study
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParentObject_0Test() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // api.getParentObject_0(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns list of genes associated with a pathway
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPathwayGeneAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getPathwayGeneAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns pathway object
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPathwayObjectTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // api.getPathwayObject(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns associations to participants (molecules, etc) for a pathway
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPathwayParticipantAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getPathwayParticipantAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns anatomical entities associated with a phenotype
     *
     * Example IDs:   * ZP:0004204   * MP:0008521 abnormal Bowman membrane  For example, *abnormal limb development* will map to *limb*
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPhenotypeAnatomyAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<NamedObject> response = api.getPhenotypeAnatomyAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns biological functions associated with a Phenotype
     *
     * This may come from a combination of asserted knowledge (e.g. abnormal levels of metabolite to corresponding GO activity) or from data-driven approach (cf Translator)  Results are typically represented as GO classes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPhenotypeFunctionAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getPhenotypeFunctionAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns gene ids for all genes for a particular phenotype in a taxon
     *
     * For example, + NCBITaxon:10090 (mouse)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPhenotypeGeneAssociationsTest() throws ApiException {
        String taxid = null;
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // api.getPhenotypeGeneAssociations(taxid, id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns associated phenotypes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPhenotypeGeneAssociations_0Test() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getPhenotypeGeneAssociations_0(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns phenotype class object
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPhenotypeObjectTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // api.getPhenotypeObject(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns associated phenotypes
     *
     * Includes phenologs, as well as equivalent phenotypes in other species
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPhenotypePhenotypeAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getPhenotypePhenotypeAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns publication object
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPubObjectTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // api.getPubObject(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns seqfeature
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSequenceFeatureObjectTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // api.getSequenceFeatureObject(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns associations between a substance and related exposures
     *
     * E.g. between pesticide and occupational exposure class
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubstanceExposuresTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getSubstanceExposures(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns associations between given drug and interactions
     *
     * Interactions can encompass drugs or environments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubstanceInteractionsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getSubstanceInteractions(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns substance entity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubstanceObjectTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Substance> response = api.getSubstanceObject(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns associations between an activity and process and the specified substance
     *
     * Examples relationships:   * substance is a metabolite of a process  * substance is synthesized by a process  * substance is modified by an activity  * substance elicits a response program/pathway  * substance is transported by activity or pathway  For example, CHEBI:40036 (amitrole)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubstanceParticipantInAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getSubstanceParticipantInAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns associations between a substance and other substances
     *
     * E.g. metabolite-of, tautomer-of, parent-of, ...
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubstanceRelationshipsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getSubstanceRelationships(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns associations between given drug and roles
     *
     * Roles may be human-oriented (e.g. pesticide) or molecular (e.g. enzyme inhibitor)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubstanceRoleAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getSubstanceRoleAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns associations between given drug and targets
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubstanceTargetAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<Association> response = api.getSubstanceTargetAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns genes associated with a variant
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVariantGeneAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getVariantGeneAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns genotypes associated with a variant
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVariantGenotypeAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getVariantGenotypeAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * TODO Returns sequence variant entity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVariantObjectTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // api.getVariantObject(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
    /**
     * Returns phenotypes associated with a variant
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVariantPhenotypeAssociationsTest() throws ApiException {
        String id = null;
        Boolean fetchObjects = null;
        Integer rows = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean unselectEvidence = null;
        Boolean useCompactAssociations = null;
        // List<AssociationResults> response = api.getVariantPhenotypeAssociations(id, fetchObjects, rows, excludeAutomaticAssertions, unselectEvidence, useCompactAssociations);

        // TODO: test validations
    }
    
}
