/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Association;
import io.swagger.client.model.VariantSet;
import io.swagger.client.model.PageOfVariantSets;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VariationsetApi
 */
public class VariationsetApiTest {

    private final VariationsetApi api = new VariationsetApi();

    
    /**
     * Deletes variant set
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteVariantSetItemTest() throws ApiException {
        String id = null;
        String id2 = null;
        String id3 = null;
        // api.deleteVariantSetItem(id, id2, id3);

        // TODO: test validations
    }
    
    /**
     * Returns list of matches
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnalyzeTest() throws ApiException {
        String id = null;
        // List<Association> response = api.getAnalyze(id);

        // TODO: test validations
    }
    
    /**
     * Returns a variant set
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVariantSetItemTest() throws ApiException {
        String id = null;
        // VariantSet response = api.getVariantSetItem(id);

        // TODO: test validations
    }
    
    /**
     * Returns list of variant sets from a specified time period
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVariantSetsArchiveCollectionTest() throws ApiException {
        Integer day = null;
        Integer year = null;
        Integer month = null;
        Integer perPage = null;
        Integer page = null;
        // PageOfVariantSets response = api.getVariantSetsArchiveCollection(day, year, month, perPage, page);

        // TODO: test validations
    }
    
    /**
     * Returns list of variant sets
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVariantSetsCollectionTest() throws ApiException {
        Integer perPage = null;
        Integer page = null;
        // PageOfVariantSets response = api.getVariantSetsCollection(perPage, page);

        // TODO: test validations
    }
    
    /**
     * Creates a new variant set
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postVariantSetsCollectionTest() throws ApiException {
        VariantSet payload = null;
        // api.postVariantSetsCollection(payload);

        // TODO: test validations
    }
    
    /**
     * Updates a variant set
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putVariantSetItemTest() throws ApiException {
        String id = null;
        String id2 = null;
        VariantSet payload = null;
        // api.putVariantSetItem(id, id2, payload);

        // TODO: test validations
    }
    
}
